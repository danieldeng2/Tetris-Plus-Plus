CORE_SRC = $(wildcard src/core/*.c)
GENE_SRC = $(wildcard src/genetic-ai/*.c)
RL_SRC   = $(wildcard src/rl-ai/*.c)
PI_SRC   = $(wildcard src/pi/*.c)

CORE_OBJS = $(patsubst src/core/%.c,obj/core/%.o,$(CORE_SRC))
GENE_OBJS = $(patsubst src/genetic-ai/%.c,obj/genetic-ai/%.o,$(GENE_SRC))
RL_OBJS   = $(patsubst src/rl-ai/%.c,obj/rl-ai/%.o,$(RL_SRC))
PI_OBJS   = $(patsubst src/pi/%.c,obj/pi/%.o,$(PI_SRC))
CORE_NO_MAIN = $(filter-out obj/core/tetris.o, $(CORE_OBJS))

CC          = gcc
IncludePath = $(addprefix -I, $(wildcard src/*/include)) 
CFLAGS      = -Wall -g -D_DEFAULT_SOURCE -std=c99 -Werror -pedantic $(IncludePath)
LDLIBS      = -lncurses -lm
PILIBS      = -lwiringPi 

all: core genetic pi rl lib
core:     bin/tetris
genetic:  bin/gtrain
rl:       bin/rltrain
pi:       bin/tetrispi

bin/tetris: $(CORE_OBJS)
	$(CC) $^ $(LDLIBS) -o $@

bin/tetrispi: $(PI_OBJS) $(CORE_OBJS)
	$(CC) $^ $(LDLIBS) $(PILIBS) -o $@

bin/gtrain: $(GENE_OBJS) $(CORE_NO_MAIN)
	$(CC) $^ $(LDLIBS) -o $@

bin/rltrain: $(RL_OBJS) $(CORE_NO_MAIN)
	$(CC) $^ $(LDLIBS) -o $@

lib:
	cd lib; make

clean:
	rm -f core.mk genetic-ai.mk rl-ai.mk pi.mk
	rm -f $(CORE_OBJS) $(GENE_OBJS) $(RL_OBJS) $(PI_OBJS)
	rm -f  bin/tetris bin/gtrain bin/rltrain bin/tetrispi
	cd lib; make clean

.PHONY: src clean lib core genetic pi rl

depend: core.mk genetic-ai.mk rl-ai.mk pi.mk
#automatic header dependency generated by gcc -MM
%.mk: src/%/*.c
	$(CC) $(CFLAGS) -MM $^ > ./$@
	sed -i '/^[^ ]/s/^/obj\/$*\//' ./$@
	sed -E -i '/(c$$|h$$)/a \\t$$(CC) $$(CFLAGS) -c -o $$@ $$<' ./$@

include core.mk genetic-ai.mk rl-ai.mk pi.mk